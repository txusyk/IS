/*
 * The MIT License
 *
 * Copyright 2016 Josu Alvarez <jalvarez041.ehu.eus>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.buscaminas.com;

import java.util.Arrays;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import java.util.function.Consumer;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import javafx.scene.control.Cell;

/**
 *
 * @author josu
 */
public class VistaBuscaminasPruebas extends javax.swing.JFrame implements ActionListener {

    String dificultad_juego = "facil";
    int x = 0, y = 0;
    int numCasillas, numMinas, contMinas;

    private CasillaGraficaPrueba[][] casillas;

    private int IdCasilla = 0;

    private int limite1 = x - 2;
    private int limite2 = y - 2;

    /**
     * Creates new form TableroPruebas
     */
    public TableroPruebas() {
        initComponents();
        inicializarBotonesDificultad();
    }

    private void inicializarBotonesDificultad() {
        //al inicializar la clase instancia los botones JRadioButton
        //dentro de un grupo de botones para que solo uno de ellos pueda
        //estar pulsado a la vez

        boton_facil.setActionCommand("facil");
        boton_medio.setActionCommand("medio");
        boton_dificil.setActionCommand("dificil");

        grupoBotones.add(boton_facil);
        grupoBotones.add(boton_medio);
        grupoBotones.add(boton_dificil);

        //Regsitramos un listener para los radio buttons
        boton_facil.addActionListener(this);
        boton_medio.addActionListener(this);
        boton_dificil.addActionListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        dificultad_juego = e.getActionCommand();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        grupoBotones = new javax.swing.ButtonGroup();
        panel_info = new javax.swing.JPanel();
        label_peticionJugador = new javax.swing.JLabel();
        texto_nombreJugador = new javax.swing.JTextField();
        label_contraseña = new javax.swing.JLabel();
        texto_password = new javax.swing.JPasswordField();
        boton_LogIn = new javax.swing.JButton();
        boton_NewUser = new javax.swing.JButton();
        panel_juego = new javax.swing.JPanel();
        label_seleccionDificultad = new javax.swing.JLabel();
        label_difFacil = new javax.swing.JLabel();
        label_difMedia = new javax.swing.JLabel();
        label_difDificil = new javax.swing.JLabel();
        boton_facil = new javax.swing.JRadioButton();
        boton_medio = new javax.swing.JRadioButton();
        boton_dificil = new javax.swing.JRadioButton();
        barra_menu = new javax.swing.JMenuBar();
        menu_archivo = new javax.swing.JMenu();
        menuArhivo_nuevaPartida = new javax.swing.JMenuItem();
        menuArchivo_ranking = new javax.swing.JMenuItem();
        menuArchivo_salir = new javax.swing.JMenuItem();
        menu_ayuda = new javax.swing.JMenu();
        menuAyuda_problemasfrecuentes = new javax.swing.JMenuItem();
        menuAyuda_FAQ = new javax.swing.JMenuItem();
        menuAyuda_acercade = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        label_peticionJugador.setText("Nombre:");

        texto_nombreJugador.setText("Jugador");
        texto_nombreJugador.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                texto_nombreJugadorMouseClicked(evt);
            }
        });

        label_contraseña.setText("Contraseña:");

        texto_password.setText("textopassword");
        texto_password.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                texto_passwordMouseClicked(evt);
            }
        });

        boton_LogIn.setText("Login");
        boton_LogIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_LogInActionPerformed(evt);
            }
        });

        boton_NewUser.setText("Nuevo Usuario");
        boton_NewUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_NewUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel_infoLayout = new javax.swing.GroupLayout(panel_info);
        panel_info.setLayout(panel_infoLayout);
        panel_infoLayout.setHorizontalGroup(
                panel_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel_infoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(panel_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(label_peticionJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(label_contraseña))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panel_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(texto_nombreJugador)
                                        .addComponent(texto_password))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                                .addComponent(boton_LogIn, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(boton_NewUser)
                                .addGap(32, 32, 32))
        );
        panel_infoLayout.setVerticalGroup(
                panel_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel_infoLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(panel_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(label_peticionJugador)
                                        .addComponent(texto_nombreJugador, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                                .addGroup(panel_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(label_contraseña)
                                        .addComponent(texto_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                        .addGroup(panel_infoLayout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addGroup(panel_infoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(boton_LogIn)
                                        .addComponent(boton_NewUser))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panel_juego.setForeground(new java.awt.Color(80, 80, 80));

        label_seleccionDificultad.setFont(new java.awt.Font("DejaVu Sans", 0, 18)); // NOI18N
        label_seleccionDificultad.setText("Selecciona un nivel de dificultad:");

        label_difFacil.setText("(7 filas, 10 columnas / 10 minas)");

        label_difMedia.setText("(10 filas, 15 columnas / 30 minas)");

        label_difDificil.setText("(12 filas, 25 columnas / 75 minas)");

        boton_facil.setSelected(true);
        boton_facil.setText("Facil");

        boton_medio.setText("Medio");

        boton_dificil.setText("DIficil");

        javax.swing.GroupLayout panel_juegoLayout = new javax.swing.GroupLayout(panel_juego);
        panel_juego.setLayout(panel_juegoLayout);
        panel_juegoLayout.setHorizontalGroup(
                panel_juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel_juegoLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(panel_juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(boton_dificil)
                                        .addComponent(boton_medio)
                                        .addComponent(boton_facil))
                                .addGap(39, 39, 39)
                                .addGroup(panel_juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(label_difFacil)
                                        .addGroup(panel_juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(label_difMedia)
                                                .addComponent(label_difDificil)))
                                .addGap(107, 107, 107))
                        .addGroup(panel_juegoLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(label_seleccionDificultad, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel_juegoLayout.setVerticalGroup(
                panel_juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panel_juegoLayout.createSequentialGroup()
                                .addContainerGap(57, Short.MAX_VALUE)
                                .addComponent(label_seleccionDificultad, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addGroup(panel_juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(label_difFacil)
                                        .addComponent(boton_facil))
                                .addGap(18, 18, 18)
                                .addGroup(panel_juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(label_difMedia)
                                        .addComponent(boton_medio))
                                .addGap(18, 18, 18)
                                .addGroup(panel_juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(label_difDificil)
                                        .addComponent(boton_dificil))
                                .addGap(43, 43, 43))
        );

        menu_archivo.setText("Archivo");

        menuArhivo_nuevaPartida.setText("Nueva partida");
        menuArhivo_nuevaPartida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuArhivo_nuevaPartidaActionPerformed(evt);
            }
        });
        menu_archivo.add(menuArhivo_nuevaPartida);

        menuArchivo_ranking.setText("Ranking de mejores jugadores");
        menu_archivo.add(menuArchivo_ranking);

        menuArchivo_salir.setText("Salir");
        menuArchivo_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuArchivo_salirActionPerformed(evt);
            }
        });
        menu_archivo.add(menuArchivo_salir);

        barra_menu.add(menu_archivo);

        menu_ayuda.setText("Ayuda");

        menuAyuda_problemasfrecuentes.setText("Problemas frecuentes ");
        menu_ayuda.add(menuAyuda_problemasfrecuentes);

        menuAyuda_FAQ.setText("F.A.Q");
        menu_ayuda.add(menuAyuda_FAQ);

        menuAyuda_acercade.setText("Acerca de");
        menu_ayuda.add(menuAyuda_acercade);

        barra_menu.add(menu_ayuda);

        setJMenuBar(barra_menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panel_info, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panel_juego, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(panel_info, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panel_juego, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void menuArchivo_salirActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        System.exit(0); //Cierra la ventana en caso de haber sido clickado
    }

    private void texto_nombreJugadorMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        texto_nombreJugador.setText(""); // Cuando se clicka sobre el cuadro de texto se borra el texto
        //que haya previamente de forma automatica
    }

    private void boton_LogInActionPerformed(java.awt.event.ActionEvent evt) {
        Usuario auxUser = new Usuario(texto_nombreJugador.getText(), texto_password.getPassword());
        if (ListaUsuarios.getMiListaUsuarios().esta(auxUser)) {
            this.iniciarPartida(auxUser, dificultad_juego);
        } else {
            JOptionPane.showMessageDialog(rootPane, "El usuario no existe. Pruebe creando un nuevo usuario");
        }
    }

    private void boton_NewUserActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        Usuario auxUser = new Usuario(texto_nombreJugador.getText(), texto_password.getPassword());
        if (ListaUsuarios.getMiListaUsuarios().esta(auxUser)) {
            JOptionPane.showMessageDialog(rootPane, "El usuario ya existe. Pruebe haciendo login");
        } else {
            ListaUsuarios.getMiListaUsuarios().anadirUsuario(auxUser);
            this.iniciarPartida(auxUser, dificultad_juego);
        }
    }

    private void texto_passwordMouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        texto_password.setText("");
    }

    private void menuArhivo_nuevaPartidaActionPerformed(java.awt.event.ActionEvent evt) {
        this.reset();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TableroPruebas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TableroPruebas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TableroPruebas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TableroPruebas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TableroPruebas().setVisible(true);
            }
        });
    }

    private void iniciarPartida(Usuario pUsuario, String pDif) {
        this.establecerMedidasTablero(pDif);
        //this.generarTableroMinas2();
        this.generarTableroMinas3();

        this.ponerMinas();
        this.fijarValoresCasillas();

        this.pack();

        this.generarBarraInformacionJuego();
        this.paintAll(this.getGraphics()); //reinicia los graficos de todas los paneles del frame

    }

    private void establecerMedidasTablero(String pDif) {

        if (null != pDif) {
            switch (pDif) {
                case "facil":
                    x = 7;
                    y = 10;
                    numMinas = y;
                    break;
                case "medio":
                    x = 10;
                    y = 15;
                    numMinas = y * 2;
                    break;
                case "dificil":
                    x = 12;
                    y = 25;
                    numMinas = y * 3;
                    break;
                default:
                    break;
            }
        }
        numCasillas = x * y;
    }

    private void generarTableroMinas2() {
        //this.getContentPane().remove(panel_info); //Borra el panel superior y asi queda maximizado el panel_juego
        GridLayout rejilla = new GridLayout(x, y,0,0);
        this.panel_juego.removeAll();
        rejilla.setHgap(-5);
        rejilla.setVgap(-5);
        this.panel_juego.setLayout(rejilla);

        casillas = new CasillaGraficaPrueba[x][y];
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                casillas[i][j] = new CasillaGraficaPrueba(this);
                casillas[i][j].setId(getID());
                //this.panel_juego.add(casillas[i][j].getBoton());
                //si se utiliza el generador del 3 no hace falta esto
            }
        }
    }

    private void generarTableroMinas3() {
        //this.getContentPane().remove(panel_info);

        this.panel_juego.removeAll();
        this.panel_juego.setLayout(new GridLayout(x, y));
        casillas = new CasillaGraficaPrueba[x][y];
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                casillas[i][j] = new CasillaGraficaPrueba(this);
            }
        }
        //paraCada(casillas -> casillas = new CasillaGraficaPrueba(this));

        paraCada(casillas -> casillas.setId(getID()));
        paraCada(casillas -> this.panel_juego.add(casillas.getBoton()));
    }
    /* codigo que gestiona el click derecho.
    private void clikarCasilla(){
    boton.addMouseListener(new MouseAdapter(){
            
    @Override
    public void mousePressed(MouseEvent e) {
        boton.getModel().setArmed(true);
        boton.getModel().setPressed(true);
        clickada = true;
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        //if(isRightButtonPressed) {underlyingButton.getModel().setPressed(true));
        boton.getModel().setArmed(false);
        boton.getModel().setPressed(false);

        if (clickada) {
            if (SwingUtilities.isRightMouseButton(e)) {
                boton.setText("F");
            } else {
                boton.setText("X");
            }
        }
        clickada = false;

    }
    
    @Override
            public void mouseExited(MouseEvent e) {
                clickada = false;
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                clickada = true;
            }                    
        });
       add(boton);
    }*/
    
    /*
    public JPanel addCells() {
        JPanel panel = new JPanel(new GridLayout(x, y));
        casillas = new CasillaGraficaPrueba[x][y];
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                casillas[i][j] = new CasillaGraficaPrueba(this);
                casillas[i][j].setId(getID());
                panel.add(casillas[i][j].getBoton());
            }
        }
        return panel;
    }

    private JPanel addCells2() {
        JPanel panel = new JPanel(new GridLayout(x, y));
        paraCada(casillas -> panel.add(casillas.getBoton()));
        return panel;
    }*/

    public void ponerMinas() {
        ArrayList<Integer> locMinas = generarPosicionesRandom(numMinas);
        for (int i : locMinas) {
            getCasilla(i).setValor(-1);
        }
    }

    private void ponerMinas2() {
        Random random = new Random();
        int counter = 0;
        while (counter < numMinas) {
            casillas[random.nextInt(x)][random.nextInt(y)].fijarMina();
            counter++;
        }
    }

    public ArrayList<Integer> generarPosicionesRandom(int pNumMinas) {
        ArrayList<Integer> listaMinas = new ArrayList<>();
        int random;
        for (int i = 0; i < this.numMinas;) {
            random = (int) (Math.random() * (x * y));
            if (!listaMinas.contains(random)) {
                listaMinas.add(random);
                i++;
            }
        }
        return listaMinas;
    }

    public void fijarValoresCasillas() {
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                if (casillas[i][j].getValor() != -1) {
                    if (j >= 1 && casillas[i][j - 1].getValor() == -1) {
                        casillas[i][j].incrementarValor();
                    }
                    if (j <= limite2 && casillas[i][j + 1].getValor() == -1) {
                        casillas[i][j].incrementarValor();
                    }
                    if (i >= 1 && casillas[i - 1][j].getValor() == -1) {
                        casillas[i][j].incrementarValor();
                    }
                    if (i <= this.limite1 && casillas[i + 1][j].getValor() == -1) {
                        casillas[i][j].incrementarValor();
                    }
                    if (i >= 1 && j >= 1 && casillas[i - 1][j - 1].getValor() == -1) {
                        casillas[i][j].incrementarValor();
                    }
                    if (i <= limite1 && j <= limite2 && casillas[i + 1][j + 1].getValor() == -1) {
                        casillas[i][j].incrementarValor();
                    }
                    if (i >= 1 && j <= limite2 && casillas[i - 1][j + 1].getValor() == -1) {
                        casillas[i][j].incrementarValor();
                    }
                    if (i <= limite1 && j >= 1 && casillas[i + 1][j - 1].getValor() == -1) {
                        casillas[i][j].incrementarValor();
                    }
                }
            }
        }
    }

    public void buscarCasillasVacias() {
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                if (casillas[i][j].estaClickada()) {
                    if (j >= 1 && casillas[i][j - 1].esVacia()) {
                        casillas[i][j - 1].clickarCasilla();
                    }
                    if (j <= limite2 && casillas[i][j + 1].esVacia()) {
                        casillas[i][j + 1].clickarCasilla();
                    }
                    if (i >= 1 && casillas[i - 1][j].esVacia()) {
                        casillas[i - 1][j].clickarCasilla();
                    }
                    if (i <= limite1 && casillas[i + 1][j].esVacia()) {
                        casillas[i + 1][j].clickarCasilla();
                    }
                    if (i >= 1 && j >= 1 && casillas[i - 1][j - 1].esVacia()) {
                        casillas[i - 1][j - 1].clickarCasilla();
                    }
                    if (i <= limite1 && j <= limite2 && casillas[i + 1][j + 1].esVacia()) {
                        casillas[i + 1][j + 1].clickarCasilla();
                    }
                    if (i >= 1 && j <= limite2 && casillas[i - 1][j + 1].esVacia()) {
                        casillas[i - 1][j + 1].clickarCasilla();
                    }
                    if (i <= limite1 && j >= 1 && casillas[i + 1][j - 1].esVacia()) {
                        casillas[i + 1][j - 1].clickarCasilla();
                    }
                }
            }
        }
    }
    
    /*
    //Inicio de codigo alternativo sobre como gestionar las casillas
    private IntStream ladosDe(int pValor) {
        return IntStream.rangeClosed(pValor - 1, pValor + 1).filter(
                x -> x >= 0 && x < x);
    }

    private Set<CasillaGraficaPrueba> getCasillasCircundantes(int pX, int pY) {
        Set<CasillaGraficaPrueba> result = new HashSet<>();
        ladosDe(pX).forEach(a -> {
            ladosDe(pY).forEach(b -> result.add(casillas[a][b]));
        });
        result.remove(casillas[pX][pY]);
        return result;
    }

    private void fijarValoresCasillas2() {
        IntStream.range(0, x).forEach(i -> {
            IntStream.range(0, y).forEach(j -> {
                if (casillas[i][j].estaClickada()) {
                    this.getCasillasCircundantes(i, j).stream().filter(CasillaGraficaPrueba::esMina).forEach(z -> casillas[i][j].incrementarValor());
                }
            });
        });
    }

    public void buscarCasillasVacias2() {
        IntStream.range(0, x).forEach(i -> {
            IntStream.range(0, y).forEach(j -> {
                if (casillas[i][j].estaClickada()) {
                    this.getCasillasCircundantes(i, j).stream().filter(CasillaGraficaPrueba::esVacia).forEach(CasillaGraficaPrueba::estaClickada);
                }
            });
        });
    }*/

    public int getID() {
        return IdCasilla++;
    }

    public CasillaGraficaPrueba getCasilla(int pId) {
        for (CasillaGraficaPrueba[] a : casillas) {
            for (CasillaGraficaPrueba b : a) {
                if (b.getId() == pId) {
                    return b;
                }
            }
        }
        return null;
    }

    public void fallo(){
        for (CasillaGraficaPrueba[] a : casillas) {
            for (CasillaGraficaPrueba b : a) {
                b.revelar();
            }
        }
    }
    
    /*
    public void fallo2(Color pColor) {
        for (CasillaGraficaPrueba[] a : casillas) {
            for (CasillaGraficaPrueba b : a) {
                b.revelar2(pColor);
            }
        }
    }*/

    public void revelar() {
        paraCada(casillas -> casillas.esVacia());
    }

    public void revelar2(Color color) {
        paraCada(casillas -> casillas.esVacia());
    }

    //Comprueba el numero de casillas sin descubrir
    //si el numero coincide con el de las minasTotales
    //devolvera true
    public boolean estaTerminado() {
        int[] result = new int[1];
        paraCada(casillas -> {
            if (casillas.esVacia()) {
                result[0]++;
            }
        });
        return result[0] == numMinas;
        //el resultado se guarda en un array para evitar la limitacion
        //de que la operacion solo puede hacerse en un contenedor mutable
    }

    private void reset() {
        this.paraCada(casillas -> casillas.reset());
        init();
    }

    private void init() {
        ponerMinas2();
        fijarValoresCasillas();
    }

    private void generarBarraInformacionJuego() {
        this.panel_info.removeAll(); //Eliminamos el contenido del panel
        this.panel_info.setLayout(new java.awt.GridLayout(1, 1));
    }

    // Variables declaration - do not modify                     
    private javax.swing.JMenuBar barra_menu;
    private javax.swing.JButton boton_LogIn;
    private javax.swing.JButton boton_NewUser;
    private javax.swing.JRadioButton boton_dificil;
    private javax.swing.JRadioButton boton_facil;
    private javax.swing.JRadioButton boton_medio;
    private javax.swing.ButtonGroup grupoBotones;
    private javax.swing.JLabel label_contraseña;
    private javax.swing.JLabel label_difDificil;
    private javax.swing.JLabel label_difFacil;
    private javax.swing.JLabel label_difMedia;
    private javax.swing.JLabel label_peticionJugador;
    private javax.swing.JLabel label_seleccionDificultad;
    private javax.swing.JMenuItem menuArchivo_ranking;
    private javax.swing.JMenuItem menuArchivo_salir;
    private javax.swing.JMenuItem menuArhivo_nuevaPartida;
    private javax.swing.JMenuItem menuAyuda_FAQ;
    private javax.swing.JMenuItem menuAyuda_acercade;
    private javax.swing.JMenuItem menuAyuda_problemasfrecuentes;
    private javax.swing.JMenu menu_archivo;
    private javax.swing.JMenu menu_ayuda;
    private javax.swing.JPanel panel_info;
    private javax.swing.JPanel panel_juego;
    private javax.swing.JTextField texto_nombreJugador;
    private javax.swing.JPasswordField texto_password;
    // End of variables declaration                   

    private void paraCada(Consumer<CasillaGraficaPrueba> pConsumer) {
        Stream.of(casillas).forEach(row -> Stream.of(row).forEach(pConsumer));
    }
}
